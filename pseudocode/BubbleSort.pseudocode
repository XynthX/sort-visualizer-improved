// best case: O(n)
// average case: O(n^2)
// worst case: O(n^2)

procedure BubbleSort(A: list of sortable items)
  n := length(A)
  repeat
    swapped := false
    for i := 1 to n inclusive do 
      if A[i - 1] > A[i] then
        swap(A[i - 1], A[i])
        swapped := true
      end if
    end for
  until swapped
end procedure

procedure OptimizedBubbleSortV1(A: list of sortable items)
  n := length(A)
  repeat
    swapped := false
    for i := 1 to n inclusive do
      if A[i - 1] > A[i] then
        swap(A[i - 1], A[i])
        swapped := true
      end if
    end for
    n := n - 1
  until swapped
end procedure

procedure OptimizedBubbleSortV2(A: list of sortable items)
  n := length(A)
  repeat
    newn := 0
    for i := 1 to n inclusive do
      if A[i - 1] > A[i] then
        swap(A[i - 1], A[i])
        newn := i
      end if
    end for
    n := newn
  until n >= 1 // n is bigger or equal to 1
end procedure
